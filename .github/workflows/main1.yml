name: Regression test

on: push

jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - uses: actions/checkout@v3

    - name: Restore cached Primes
      id: cache-primes-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          path/to/dependencies
          some/other/dependencies
        key: ${{ runner.os }}-primes

    - name: Save Primes
      id: cache-primes-save
      uses: actions/cache/save@v3
      with:
        path: |
          path/to/dependencies
          some/other/dependencies
        key: ${{ steps.cache-primes-restore.outputs.cache-primary-key }}


 # 第二步：打包构建
    - name: Build release
      uses: actions/setup-node@v1
    - run: | 
             npm init -y
             npm run build --if-present # 打包
             zip -r Resources Resources 
      # 把.nuxt、nuxt.config.js等文件，打包压缩为release.tgz



    # 第三步：发布 Release
    - name: Create Release # 创建Release，可以在仓库看到一个个版本
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }} # 之前GitHub添加的Token
      with:
        tag_name: ${{github.ref}}
        release_name: Release${{github.ref}}
        draft: true # 是否是草稿
        prerelease: false # 是否是预发布


    - name: Pull Docker images
      run: |
          docker pull sophgo/tpuc_dev:latest


    - name: Run Docker Container and YOLOv5 Test
      run: |
          docker run --privileged --name github_actions_test -v $PWD:/workspace sophgo/tpuc_dev:latest bash -c '

      
          cd tpu-mlir
          source ./envsetup.sh
          ./build.sh

          mkdir model_yolov5s && cd model_yolov5s
          cp ${REGRESSION_PATH}/model/yolov5s.onnx .
          cp -rf ${REGRESSION_PATH}/dataset/COCO2017 .
          cp -rf ${REGRESSION_PATH}/image .
          mkdir workspace && cd workspace
          
          ########### Model to MLIR ###############
          
          model_transform.py \
             --model_name yolov5s \
             --model_def ../yolov5s.onnx \
             --input_shapes [[1,3,640,640]] \
             --mean 0.0,0.0,0.0 \
             --scale 0.0039216,0.0039216,0.0039216 \
             --keep_aspect_ratio \
             --pixel_format rgb \
             --output_names 350,498,646 \
             --test_input ../image/dog.jpg \
             --test_result yolov5s_top_outputs.npz \
             --mlir yolov5s.mlir

           model_deploy.py \
             --mlir yolov5s.mlir \
             --quantize F16 \
             --chip bm1684x \
             --test_input yolov5s_in_f32.npz \
             --test_reference yolov5s_top_outputs.npz \
             --model yolov5s_1684x_f16.bmodel
             
           ############ MLIR to int8 bmodel ##########
           
          run_calibration.py yolov5s.mlir \
              --dataset ../COCO2017 \
              --input_num 100 \
              -o yolov5s_cali_table

          model_deploy.py \
              --mlir yolov5s.mlir \
              --quantize INT8 \
              --calibration_table yolov5s_cali_table \
              --chip bm1684x \
              --test_input yolov5s_in_f32.npz \
              --test_reference yolov5s_top_outputs.npz \
              --tolerance 0.85,0.45 \
              --model yolov5s_1684x_int8.bmodel
              
           ############ Results Comparison ##########
           
           detect_yolov5.py \
              --input ../image/dog.jpg \
              --model ../yolov5s.onnx \
              --output dog_origin.jpg
        
           detect_yolov5.py \
              --input ../image/dog.jpg \
              --model yolov5s_1684x_f16.bmodel \
              --output dog_f16.jpg

           detect_yolov5.py \
              --input ../image/dog.jpg \
              --model yolov5s_1684x_int8.bmodel \
              --output dog_int8.jpg

          '


          


          




